/**
 *  Zigbee Metering Plug driver for Hubitat Elevation - Power, Energy, Voltage, Amperage
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 * 
 *  Based on "SmartThings/iquix" DH
 * 
 *
 *  ver. 1.0.0 2021-11-09 kkossev - first version: - reads Power, Energy, Voltage, Amperage once every 60 seconds
 *  ver. 1.0.1 2021-11-10 kkossev - added 'pollingInterval' preference; 'amperage' attribute name bug fix; 
 *  ver. 1.1.0 2021-11-12 kkossev - added 'PresenceSensor' capability; the automatic polling can be switched off.
 *  ver. 1.1.1 2021-11-25 kkossev - added Tuya Outlet TS011F fingerprint
 *
 */
import groovy.transform.Field
import hubitat.zigbee.zcl.DataType

metadata {
    definition (name: "Tuya Zigbee Metering Plug", namespace: "kkossev", author: "Krassimir Kossev", importUrl: "https://raw.githubusercontent.com/kkossev/Hubitat/main/Drivers/Tuya%20Zigbee%20Metering%20Plug/Tuya%20Zigbee%20Metering%20Plug.groovy" ) {
        capability "EnergyMeter"          // energy - NUMBER, unit:kWh
        capability "PowerMeter"           // power - NUMBER, unit:W
        capability "CurrentMeter"         // amperage - NUMBER, unit:A
        capability "VoltageMeasurement"   // voltage - NUMBER, unit:V; frequency - NUMBER, unit:Hz
        capability "Actuator"    
        capability "Switch"               // switch - ENUM ["on", "off"]; off(); on()
        capability "Outlet"               // switch - ENUM ["on", "off"]; off(); on()
        capability "Refresh"              // refresh()
        capability "Health Check"         // checkInterval - NUMBER; ping()
        capability "Sensor"
        capability "Configuration"        // configure()
        capability "PresenceSensor"       // ENUM ["present", "not present"]
        capability "Polling"              // poll()
        //capability "SignalStrength"       // lqi - NUMBER; rssi - NUMBER
        //capability "PowerSource"          // powerSource - ENUM ["battery", "dc", "mains", "unknown"]


        fingerprint profileId: "0104", inClusters: "0000, 0004, 0005, 0006, 0702, 0B04", outClusters: "0019, 000A", manufacturer: "_TZ3000_vtscrpmw", model: "TS0121",  deviceJoinName: "Tuya Outlet" //Tuya Smart Plug
        fingerprint profileId: "0104", inClusters: "0000, 0004, 0005, 0006, 0702, 0B04", outClusters: "0019, 000A", manufacturer: "_TZ3000_3ooaz3ng", model: "TS0121",  deviceJoinName: "Tuya Outlet" //Tuya Smart Plug        
        fingerprint profileId: "0104", inClusters: "0000, 0004, 0005, 0006, 0702, 0B04", outClusters: "0019, 000A", manufacturer: "_TZ3000_g5xawfcq", model: "TS0121",  deviceJoinName: "Blitzwolf BW-SHP13" //Blitzwolf BW-SHP13  
        fingerprint profileId: "0104", inClusters: "0000, 0004, 0005, 0006, 0702, 0B04", outClusters: "0019, 000A", manufacturer: "_TZ3000_rdtixbnu", model: "TS0121",  deviceJoinName: "Tuya Outlet" //Tuya Smart Plug    
        fingerprint profileId: "0104", inClusters: "0000, 0003, 0004, 0005, 0006, 0702, 0B04, E000, E001", outClusters: "0019, 000A", manufacturer: "_TZ3000_cphmq0q7", model: "TS011F",  deviceJoinName: "Tuya Outlet TS011F" //TS011F    
    }
    preferences {
        input (name: "logEnable", type: "bool", title: "<b>Enable debug logging</b>", description: "<i>Debug information, useful for troubleshooting. Recommended value is <b>false</b></i>", defaultValue: false)
        input (name: "txtEnable", type: "bool", title: "<b>Enable description text logging</b>", description: "<i>Display measured values in HE log page. Recommended value is <b>true</b></i>", defaultValue: true)
        input (name: "autoPollingEnabled", type: "bool", title: "<b>Enable automatic polling</b>", description: "<i>Enable outlet automatic polling for power, voltage, amperage, energy and switch state. Recommended value is <b>true</b></i>", defaultValue: true)
        if (autoPollingEnabled?.value==true) {
            input (name: "pollingInterval", type: "number", title: "<b>Polling interval</b>, seconds", description: "<i>The time period when the smart plug will be polled for power, voltage and amperage readings. Recommended value is <b>60 seconds</b></i>", 
                   range: "10..3600", defaultValue: 60)
        }
    }
}

// Constants
@Field static final Integer powerDiv = 1
@Field static final Integer energyDiv = 100
@Field static final Integer currentDiv = 1000
@Field static final Integer presenceCountTreshold = 3

def parse(String description) {
    if (logEnable) {log.debug "description is $description"}
    def event = zigbee.getEvent(description)

    if (event) {
        //log.info "event enter:$event"
        setPresent()
        if (event.name== "power") {
            event.value = event.value/powerDiv
            event.unit = "W"
        } else if (event.name== "energy") {
            event.value = event.value/energyDiv
            event.unit = "kWh"
        }
        if (txtEnable) {log.info "${event.name} = $event.value"} 
        sendEvent(event)
        if (event.name== "switch") {
            //TODO: if the switch changes its previous state - refresh!
            if (state.lastSwitchState != event.value ) {
                if (logEnable) {log.trace "switch state changed from <b>${state.lastSwitchState}</b> to <b>${event.value}</b>"}
                state.lastSwitchState = event.value
            }
        }
    } else {
        List result = []
        def descMap = zigbee.parseDescriptionAsMap(description)
        if (logEnable) {log.debug "Desc Map: $descMap"}

        List attrData = [[cluster: descMap.cluster ,attrId: descMap.attrId, value: descMap.value]]
        descMap.additionalAttrs.each {
            attrData << [cluster: descMap.cluster, attrId: it.attrId, value: it.value]
        }

        attrData.each {
                def map = [:]
                if (it.value && it.cluster == "0B04" && it.attrId == "050B") {
                        map.name = "power"
                        map.value = zigbee.convertHexToInt(it.value)/powerDiv
                        map.unit = "W"
                        if (state.lastPower != map.value ) {
                            if (logEnable) {log.trace "power changed from <b>${state.lastPower}</b> to <b>${map.value}</b>"}
                            state.lastPower = map.value
                        }
                }
                else if (it.value && it.cluster == "0B04" && it.attrId == "0505") {
                        map.name = "voltage"
                        map.value = zigbee.convertHexToInt(it.value)/powerDiv
                        map.unit = "V"
                }
                else if (it.value && it.cluster == "0B04" && it.attrId == "0508") {
                        map.name = "amperage"
                        map.value = zigbee.convertHexToInt(it.value)/currentDiv
                        map.unit = "A"
                }
                else if (it.value && it.cluster == "0702" && it.attrId == "0000") {
                        map.name = "energy"
                        map.value = zigbee.convertHexToInt(it.value)/energyDiv
                        map.unit = "kWh"
                }
                else {
                    //log.warn "^^^^ UNRPOCESSED! ^^^^"
                }

                if (map) {
                    if (txtEnable) {log.info "${map.name} = ${map.value} ${map.unit}"}
                    result << createEvent(map)
                }
                if (logEnable) {log.debug "Parse returned $map"}
        }
        return result
    }
}

def off() {
    def cmds = zigbee.off()
    if (device.getDataValue("model") == "HY0105") {
        cmds += zigbee.command(zigbee.ONOFF_CLUSTER, 0x00, "", [destEndpoint: 0x02])
    }
    return cmds
}


def on() {
    def cmds = zigbee.on()
    if (device.getDataValue("model") == "HY0105") {
        cmds += zigbee.command(zigbee.ONOFF_CLUSTER, 0x01, "", [destEndpoint: 0x02])
    }
    return cmds
}

/**
 * PING is used by Device-Watch in attempt to reach the Device
 * */
def ping() {
    return refresh()
}

// Sends refresh / readAttribute commands to the plug
def poll() {
    zigbee.onOffRefresh() +
    zigbee.electricMeasurementPowerRefresh() +
    zigbee.readAttribute(0x0702, 0x0000) + 
    zigbee.readAttribute(0x0B04, 0x0505) +      // voltage
    zigbee.readAttribute(0x0B04, 0x0508)        // current
}

def refresh() {
    if (logEnable) {log.debug "refresh"}
    poll()
}

def autoPoll() {
    if (logEnable) {log.debug "autoPoll()"}
    checkIfNotPresent()
    if (autoPollingEnabled?.value==true) {
        runIn( pollingInterval.value, autoPoll)
    }
    poll()    
}

// Called when preferences are saved
def updated(){
    if (logEnable) {log.debug "updated() : Saved preferences"}
    configure()
}


def configure() {
    state.clear()
    state.lastPower = "unknown"
    state.lastSwitchState = "unknown"
    state.lastPresenceState = "unknown"
    state.notPresentCounter = 0
    // this device will send instantaneous demand and current summation delivered every 1 minute
    sendEvent(name: "checkInterval", value: 2 * 60 + 10 * 60, displayed: false, data: [protocol: "zigbee", hubHardwareId: device.hub.hardwareID])
    log.debug "Configuring Reporting"
    if (device.getDataValue("model") == "TS0121") {
        unschedule()
        runIn( pollingInterval.value, autoPoll)
    }    
    return refresh() +
           zigbee.onOffConfig() +
           zigbee.configureReporting(0x0702, 0x0000, DataType.UINT48, 1, 600, 1)// +
           //zigbee.electricMeasurementPowerConfig(1, 600, 1) 
}

// not used !
def powerRefresh() {
    def cmds = zigbee.electricMeasurementPowerRefresh()
    cmds.each{
        sendHubCommand(new hubitat.device.HubMultiAction(delayBetween(cmds,200), hubitat.device.Protocol.ZIGBEE))
    }
}

// called when anything was received from the Zigbee device in parse() method..
//
def setPresent() {
    if (state.lastPresenceState != "present") {
    	sendEvent(name: "presence", value: "present") 
        state.lastPresenceState = "present"
    }
    state.notPresentCounter = 0
}

// called from autoPoll()
//
def checkIfNotPresent() {
    state.notPresentCounter = state.notPresentCounter + 1
    if (state.notPresentCounter > presenceCountTreshold) {
        if (state.lastPresenceState != "not present") {
	        sendEvent(name: "presence", value: "not present")
            state.lastPresenceState = "not present"
        }
    }
}

void sendZigbeeCommands(List<String> cmds) {
    if (logEnable) {log.debug "${device.displayName} sendZigbeeCommands received : ${cmds}"}
	sendHubCommand(new hubitat.device.HubMultiAction(cmds, hubitat.device.Protocol.ZIGBEE))
}
