/**
 *  Tuya Zigbee Metering Plug driver for Hubitat Elevation - Power, Energy, Voltage, Amperage
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 *  The inital version was based on "SmartThings/iquix" DHT
 *
 *  ver. 1.0.0 2021-11-09 kkossev - first version: - reads Power, Energy, Voltage, Amperage once every 60 seconds
 *  ver. 1.0.1 2021-11-10 kkossev - added 'pollingInterval' preference; 'amperage' attribute name bug fix; 
 *  ver. 1.1.0 2021-11-12 kkossev - added 'PresenceSensor' capability; the automatic polling can be switched off.
 *  ver. 1.1.1 2021-11-25 kkossev - added Tuya Outlet TS011F fingerprint
 *  ver. 1.1.2 2021-12-24 kkossev - added Tuya / Neo NAS-WR01 fingerprint; fingerprint inClusters correction
 *  ver. 1.2.0 2021-12-29 kkossev - major refactoring and optimizations
 *  ver. 1.2.1 2021-12-29 kkossev - added AlwaysOn option
 *  ver. 1.3.0 2022-01-01 kkossev - added 'HIKING TOMZN DDS238-2 TS0601'
 *  ver. 1.3.1 2022-01-02 kkossev - minor bug fixes
 *  ver. 1.3.2 2022-01-12 kkossev - Tuya cluster command bug fix (HIKING TOMZN TS0601)
 *  ver. 1.4.0 2022-01-23 kkossev - debug / trace logging cleanup; initialize switch and energy automatic reporting mode; energy and switch are excluded from polling; 
 *                                  default debug loging is false, optimizations are true; switch digital/physical bug fixed; added driver version check
 *  ver. 1.4.1 2022-01-27 kkossev - added XH-002P Outlet TS011F fingerprints (2 variants)
 *
 */
import groovy.json.*
import groovy.transform.Field
import hubitat.zigbee.zcl.DataType

def version() { "1.4.1" }
def timeStamp() {"2022/01/23 11:09 PM"}

metadata {
    definition (name: "Tuya Zigbee Metering Plug", namespace: "kkossev", author: "Krassimir Kossev", importUrl: "https://raw.githubusercontent.com/kkossev/Hubitat/main/Drivers/Tuya%20Zigbee%20Metering%20Plug/Tuya%20Zigbee%20Metering%20Plug.groovy", singleThreaded: true ) {
        capability "EnergyMeter"
        capability "PowerMeter"
        capability "CurrentMeter"
        capability "VoltageMeasurement"
        capability "Actuator"    
        //capability "Switch"  Outlet has same attribute switch and functions on off
        capability "Outlet"
        capability "Refresh"
        capability "Health Check"
        capability "Sensor"
        capability "Initialize"
        capability "PresenceSensor"
        capability "Polling"
        command "initialize"

        fingerprint profileId: "0104", inClusters: "0000, 0004, 0005, 0006, 0702, 0B04", outClusters: "0019, 000A", manufacturer: "_TZ3000_vtscrpmw", model: "TS0121",  deviceJoinName: "Tuya Outlet" //Tuya Smart Plug
        fingerprint profileId: "0104", inClusters: "0000, 0004, 0005, 0006, 0702, 0B04", outClusters: "0019, 000A", manufacturer: "_TZ3000_3ooaz3ng", model: "TS0121",  deviceJoinName: "Tuya Outlet" //Tuya Smart Plug        
        fingerprint profileId: "0104", inClusters: "0000, 0004, 0005, 0006, 0702, 0B04", outClusters: "0019, 000A", manufacturer: "_TZ3000_rdtixbnu", model: "TS0121",  deviceJoinName: "Tuya Outlet" //Tuya Smart Plug    
        fingerprint profileId:"0104", endpointId:"01", inClusters:"0000,0004,0005,0006,0702,0B04", outClusters:"0019,000A", model:"TS0121", manufacturer:"_TZ3000_g5xawfcq",  deviceJoinName: "Blitzwolf BW-SHP13" //Blitzwolf BW-SHP13  
        fingerprint profileId:"0104", endpointId:"01", inClusters:"0000,0003,0004,0005,0006,0702,0B04,E000,E001", outClusters:"0019,000A", model:"TS011F", manufacturer:"_TZ3000_cphmq0q7" , deviceJoinName: "Tuya Outlet TS011F" //TS011F   
        fingerprint profileId:"0104", endpointId:"01", inClusters:"0003,0004,0005,0006,0702,0B04,E000,E001,0000", outClusters:"0019,000A", model:"TS011F", manufacturer:"_TZ3000_w0qqde0g", deviceJoinName: "Neo NAS-WR01 Outlet TS011F"  
        fingerprint profileId:"0104", endpointId:"01", inClusters:"0003,0004,0005,0006,0702,0B04,E000,E001,0000", outClusters:"0019,000A", model:"TS011F", manufacturer:"_TZ3000_v1pdxuqq", deviceJoinName: "XH-002P Outlet TS011F var. 1"  
        fingerprint profileId:"0104", endpointId:"01", inClusters:"0003,0004,0005,0006,E000,E001,0000", outClusters:"0019,000A", model:"TS011F", manufacturer:"_TZ3000_v1pdxuqq", deviceJoinName: "XH-002P Outlet TS011F var. 2"  
        fingerprint profileId:"0104", endpointId:"01", inClusters:"0000,0004,0005,EF00", outClusters:"0019,000A", model:"TS0601", manufacturer:"_TZE200_byzdayie", deviceJoinName: "HIKING TOMZN DDS238-2 TS0601_din"  
        fingerprint profileId:"0104", endpointId:"01", inClusters:"0000,0004,0005,EF00", outClusters:"0019,000A", model:"TS0601", manufacturer:"_TZE200_fsb6zw01", deviceJoinName: "Tuya Energy Device"  
    }
    preferences {
        input (name: "logEnable", type: "bool", title: "<b>Debug logging</b>", description: "<i>Debug information, useful for troubleshooting. Recommended value is <b>false</b></i>", defaultValue: false)
        input (name: "txtEnable", type: "bool", title: "<b>Description text logging</b>", description: "<i>Display measured values in HE log page. Recommended value is <b>true</b></i>", defaultValue: true)
        input (name: "autoPollingEnabled", type: "bool", title: "<b>Automatic polling</b>", description: "<i>Enable outlet automatic polling for power, voltage, amperage, energy and switch state. Recommended value is <b>true</b></i>", defaultValue: true)
        if (autoPollingEnabled?.value==true) {
            input (name: "pollingInterval", type: "number", title: "<b>Polling interval</b>, seconds", description: "<i>The time period when the smart plug will be polled for power, voltage and amperage readings. Recommended value is <b>60 seconds</b></i>", 
                   range: "10..3600", defaultValue: defaultPollingInterval)
        }
        input (name: "alwaysOn", type: "bool", title: "<b>Always On</b>", description: "<i>Disable switching OFF for plugs that must be always On</i>", defaultValue: false)
        input (name: "optimizations", type: "bool", title: "<b>Optimize polling and logging</b>", description: "<i>Additional optimizations to reduce the hub load</i>. Recommended value is <b>true</b>", defaultValue: true)
        if (optimizations?.value==true) {
            input (name: "energyMinReportingTime", type: "number", title: "<b>Energy shortest reporting interval</b>, seconds", description: "<i>The minimum allowed time between two Energy reports. Recommended value is <b>60 seconds</b></i>", 
                   range: "10..86399", defaultValue: 60)
            input (name: "energyMaxReportingTime", type: "number", title: "<b>Energy longest reporting interval</b>, seconds", description: "<i>The maximum time without any Energy reports. Recommended value is <b>3600 seconds</b></i>", 
                   range: "120..86400", defaultValue: 3600)
            input (name: "energyTreshold", type: "number", title: "<b>Energy minimum change to be reported</b>, watt/Hours", description: "<i>The minimum Energy change that will trigger reporting.</i>", 
                   range: "1..10000", defaultValue: 1)
        }
    }
}

// Constants
@Field static final Integer powerDiv = 1
@Field static final Integer energyDiv = 100
@Field static final Integer currentDiv = 1000
@Field static final Integer presenceCountTreshold = 3
@Field static final Integer defaultPollingInterval = 60
@Field static final Integer debouncingTimer = 300
@Field static final Integer digitalTimer = 1000
@Field static final Integer refreshTimer = 3000
@Field static String UNKNOWN = "UNKNOWN"


def parse(String description) {
    //if (logEnable==true) {log.debug "description is $description"}
    checkDriverVersion()
    setPresent()
    if (isTuyaE00xCluster(description) == true || otherTuyaOddities(description) == true) {
        return null
    }
    def event = [:]
    try {
        event = zigbee.getEvent(description)
    }
    catch ( e ) {
        log.warn "exception caught while parsing description:  ${description}"
        //return null
    }
    if (event) {
        if (logEnable==true) log.debug "Event enter: $event"
        switch (event.name) {
            case "switch" :
                switchEvent( event.value )
                break
            // for smart plugs that can be configured to fire atimaticallty power and energy events ..
            case "power" :    
                powerEvent(event.value/powerDiv)
                break
            case "energy" :
                energyEvent(event.value/energyDiv)
                break
            default :
                if (txtEnable) {log.warn "received <b>unhandled event</b> ${event.name} = $event.value"} 
                break
        }
        return null //event
    }
    else {
        //List result = []
        def descMap = [:]
        try {
            descMap = zigbee.parseDescriptionAsMap(description)
        }
        catch ( e ) {
            log.warn "exception caught while parsing descMap:  ${descMap}"
            //return null
        }
        if (logEnable) {log.debug "Desc Map: $descMap"}
        if (descMap.attrId != null ) {
            // attribute report received
            List attrData = [[cluster: descMap.cluster ,attrId: descMap.attrId, value: descMap.value, status: descMap.status]]
            descMap.additionalAttrs.each {
                attrData << [cluster: descMap.cluster, attrId: it.attrId, value: it.value, status: it.status]
            }
            attrData.each {
                def map = [:]
                if (it.status == "86") {
                    disableUnsupportedAttribute(descMap.cluster, it.attrId)
                }
                else if (it.value && it.cluster == "0B04" && it.attrId == "050B") {
                        powerEvent(zigbee.convertHexToInt(it.value)/powerDiv)
                        if (state.lastPower != zigbee.convertHexToInt(it.value)/powerDiv ) {
                            if (logEnable) {log.trace "power changed from <b>${state.lastPower}</b> to <b>${zigbee.convertHexToInt(it.value)/powerDiv}</b>"}
                            state.lastPower = zigbee.convertHexToInt(it.value)/powerDiv
                        }
                }
                else if (it.value && it.cluster == "0B04" && it.attrId == "0505") {
                    voltageEvent(zigbee.convertHexToInt(it.value)/powerDiv)
                }
                else if (it.value && it.cluster == "0B04" && it.attrId == "0508") {
                    amperageEvent(zigbee.convertHexToInt(it.value)/currentDiv)
                }
                else if (it.value && it.cluster == "0B04" && it.attrId == "0510") {    //Power Factor Attribute ID: 0x0510
                    if (txtEnable) {log.info "power Factor reported: ${it.value}" }    // not tested
                }
                else if (it.value && it.cluster == "0702" && it.attrId == "0000") {
                    energyEvent(zigbee.convertHexToInt(it.value)/energyDiv)
                }
                else if ( it.cluster == "0000" && it.attrId in ["0001", "FFE0", "FFE1", "FFE2", "FFE4", "FFFE", "FFDF"]) {
                    //if (logEnable) {log.debug "Tuya specific attribute ${it.attrId} reported: ${it.value}" }    // not tested
                }
                else {
                    if (logEnable==true) log.warn "Unprocessed attribute report: cluster=${it.cluster} attrId=${it.attrId} value=${it.value} status=${it.status} data=${descMap.data}"
                }
                //if (logEnable) {log.debug "Parse returned $map"}
            } // for each attribute
        } // if attribute report
        else if (descMap.profileId == "0000") { //zdo
            parseZDOcommand(descMap)
        } 
        else if (descMap.clusterId != null && descMap.profileId == "0104") { // ZHA global command
            parseZHAcommand(descMap)
        } 
        else {
            if (logEnable==true)  log.warn "Unprocesed unknown command: cluster=${descMap.clusterId} command=${descMap.command} attrId=${descMap.attrId} value=${descMap.value} data=${descMap.data}"
        }
        return null //result
    } // descMap
}

def switchEvent( value ) {
    def map = [:] 
    boolean bWasChange = false
    if (state.switchDebouncing==true && value==state.lastSwitchState) {    // some plugs send only catchall events, some only readattr reports, but some will fire both...
        if (logEnable) {log.debug "Ignored duplicated switch event for model ${state.model}: ${description}"} 
        runInMillis( debouncingTimer, switchDebouncingClear)
        return null
    }
    map.type = state.isDigital == true ? "digital" : "physical"
    if (state.lastSwitchState != value ) {
        bWasChange = true
        if (logEnable) {log.debug "Switch state changed from <b>${state.lastSwitchState}</b> to <b>${value}</b>"}
        if (autoPollingEnabled == true) {
            runInMillis(5000, pollPower)
            runIn( pollingInterval, autoPoll) // restart polling interval timer
        }
        state.switchDebouncing = true
        state.lastSwitchState = value
        runInMillis( debouncingTimer, switchDebouncingClear)
    }
    map.name = "switch"
    map.value = value
    if (state.isRefreshRequest == true || state.model == "TS0601") {
        map.descriptionText = "${device.displayName} switch is ${value}"
    }
    else {
        map.descriptionText = "${device.displayName} was turned ${value} [${map.type}]"
    }
    if (optimizations==false || bWasChange==true ) 
    {
        if (txtEnable) {log.info "${map.descriptionText}"}
        sendEvent(map)
    }
    clearIsDigital()
}

def voltageEvent( voltage ) {
    def map = [:] 
    map.name = "voltage"
    map.value = voltage
    map.unit = "V"
    if (state.lastVoltage != voltage || optimizations==false ) {
        state.lastVoltage = voltage
        if (txtEnable) {log.info "${device.displayName} ${map.name} is ${map.value} ${map.unit}"}
        sendEvent(map)
    }
}

def powerEvent( power ) {
    def map = [:] 
    map.name = "power"
    map.value = power
    map.unit = "W"
    if (state.lastPower != power || optimizations==false ) {
        state.lastPower = power    
        if (txtEnable) {log.info "${device.displayName} ${map.name} is ${map.value} ${map.unit}"}
        sendEvent(map)
    }
}

def amperageEvent( amperage ) {
    def map = [:] 
    map.name = "amperage"
    map.value = amperage
    map.unit = "A"
    if (state.lastAmperage != amperage || optimizations==false ) {
        state.lastAmperage = amperage    
        if (txtEnable) {log.info "${device.displayName} ${map.name} is ${map.value} ${map.unit}"}
        sendEvent(map)
    }
}

def energyEvent( energy ) {
    def map = [:] 
    map.name = "energy"
    map.value = energy
    map.unit = "kWh"
    if (state.lastEnergy != energy || optimizations==false ) {
        state.lastEnergy = energy    
        if (txtEnable) {log.info "${device.displayName} ${map.name} is ${map.value} ${map.unit}"}
        sendEvent(map)
    }
    else {
        if (logEnable) {log.debug "${device.displayName} ${map.name} is ${map.value} ${map.unit} (no change)"}
    }
}



def parseZDOcommand( Map descMap ) {
    switch (descMap.clusterId) {
        case "0006" :
            if (logEnable) log.info "Received match descriptor request, data=${descMap.data} (Sequence Number:${descMap.data[0]}, Input cluster count:${descMap.data[5]} Input cluster: 0x${descMap.data[7]+descMap.data[6]})"
            break
        case "0013" : // device announcement
            if (logEnable) log.info "Received device announcement, data=${descMap.data} (Sequence Number:${descMap.data[0]}, Device network ID: ${descMap.data[2]+descMap.data[1]}, Capability Information: ${descMap.data[11]})"
            break
        case "8004" : // simple descriptor response
            if (logEnable) log.info "Received simple descriptor response, data=${descMap.data} (Sequence Number:${descMap.data[0]}, status:${descMap.data[1]}, lenght:${hubitat.helper.HexUtils.hexStringToInt(descMap.data[4])}"
            parseSimpleDescriptorResponse( descMap )
            break
        case "8005" : // endpoint response
            if (logEnable) log.info "Received endpoint response: cluster: ${descMap.clusterId} (endpoint response) endpointCount = ${ descMap.data[4]}  endpointList = ${descMap.data[5]}"
            break
        case "8021" : // bind response
            if (logEnable) log.info "Received bind response, data=${descMap.data} (Sequence Number:${descMap.data[0]}, Status: ${descMap.data[1]=="00" ? 'Success' : '<b>Failure</b>'})"
            break
        case "8038" : // Management Network Update Notify
            if (logEnable) log.info "Received Management Network Update Notify, data=${descMap.data}"
            break
        default :
            if (logEnable) log.warn "Unprocessed ZDO command: cluster=${descMap.clusterId} command=${descMap.command} attrId=${descMap.attrId} value=${descMap.value} data=${descMap.data}"
    }
}

def parseSimpleDescriptorResponse(Map descMap) {
    //log.info "Received simple descriptor response, data=${descMap.data} (Sequence Number:${descMap.data[0]}, status:${descMap.data[1]}, lenght:${hubitat.helper.HexUtils.hexStringToInt(descMap.data[4])}"
    if (logEnable==true) log.info "Endpoint: ${descMap.data[5]} Application Device:${descMap.data[9]}${descMap.data[8]}, Application Version:${descMap.data[10]}"
    def inputClusterCount = hubitat.helper.HexUtils.hexStringToInt(descMap.data[11])
    def inputClusterList = ""
    for (int i in 1..inputClusterCount) {
        inputClusterList += descMap.data[13+(i-1)*2] + descMap.data[12+(i-1)*2] + ","
    }
    inputClusterList = inputClusterList.substring(0, inputClusterList.length() - 1)
    if (logEnable==true) log.info "Input Cluster Count: ${inputClusterCount} Input Cluster List : ${inputClusterList}"
    if (getDataValue("inClusters") != inputClusterList)  {
        if (logEnable==true) log.warn "inClusters=${getDataValue('inClusters')} differs from inputClusterList:${inputClusterList} - will be updated!"
        updateDataValue("inClusters", inputClusterList)
    }
    
    def outputClusterCount = hubitat.helper.HexUtils.hexStringToInt(descMap.data[12+inputClusterCount*2])
    def outputClusterList = ""
    for (int i in 1..outputClusterCount) {
        outputClusterList += descMap.data[14+inputClusterCount*2+(i-1)*2] + descMap.data[13+inputClusterCount*2+(i-1)*2] + ","
    }
    outputClusterList = outputClusterList.substring(0, outputClusterList.length() - 1)
    if (logEnable==true) log.info "Output Cluster Count: ${outputClusterCount} Output Cluster List : ${outputClusterList}"
    if (getDataValue("outClusters") != outputClusterList)  {
        if (logEnable==true) log.warn "outClusters=${getDataValue('outClusters')} differs from outputClusterList:${outputClusterList} -  will be updated!"
        updateDataValue("outClusters", outputClusterList)
    }
}

def disableUnsupportedAttribute(String clusterId, String attrId) {
    switch (clusterId) {
        case "0006" :    // Switch
            if (logEnable==true) log.warn "Switch polling is not supported -> Switch polling will be diabled."
            state.switchPollingSupported = false
            break
        case "0B04" : // Electrical Measurement attribute is not supported!
            switch (attrId) {
                case "0505" :    // Voltage
                    if (logEnable==true) log.warn "Voltage polling is not supported -> Voltage polling will be diabled."
                    state.voltagePollingSupported = false
                    break
                case "0508" :     // Current
                    if (logEnable==true) log.warn "Current polling is not supported -> Current polling will be diabled."
                    state.currentPollingSupported = false
                    break
                case "050B" :     // Power
                    if (logEnable==true) log.warn "Power polling is not supported! -> Power polling will be diabled."
                    state.powerPollingSupported = false
                    break
                default :
                    if (logEnable==true) log.warn "Read attribute response: unsupported Attributte ${attrId} for Electrical Measurement cluster ${clusterId}"
                    break
            }
            break
        case "0702" : // Simple Metering Cluster
            if (logEnable==true) log.warn "Energy measurement is not supported! -> Energy polling will be diabled."
            state.energyPollingSupported = false
            break
        default :
            if (logEnable==true) log.warn "Read attribute response: unsupported Attributte ${attrId} cluster ${clusterId}"
            break
    }
}

def parseZHAcommand( Map descMap) {
    switch (descMap.command) {
        case "01" : //read attribute response. If there was no error, the successful attribute reading would be processed in the main parse() method.
            def status = descMap.data[2]
            def attrId = descMap.data[1] + descMap.data[0] 
            if (status == "86") {
                disableUnsupportedAttribute(descMap.clusterId, attrId)
                if (logEnable==true) log.trace "descMap = ${descMap}"
            }
            else {
                switch (descMap.clusterId) {
                    case "EF00" :
                        //if (logEnable==true) log.warn "Tuya cluster read attribute response: code ${status} Attributte ${attrId} cluster ${descMap.clusterId} data ${descMap.data}"
                        def attribute = getAttribute(descMap.data)
                        def value = getAttributeValue(descMap.data)
                        //if (logEnable==true) log.trace "attribute=${attribute} value=${value}"
                        def map = [:]
                        def cmd = /*descMap.data[0]+*/ descMap.data[2]
                        switch (cmd) { // code : descMap.data[2]    ; attrId = descMap.data[1] + descMap.data[0] 
                            case "01" : // switch
                                switchEvent(value==0 ? "off" : "on")
                                break
                            case "11" : // Energy
                                energyEvent(value/100)
                                break
                            case "12" : // Amperage
                                amperageEvent(value/1000)
                                break
                            case "13" : // Power
                                powerEvent(value/10)
                                break
                            case "14" : // Voltage
                                voltageEvent(value/10)
                                break
                            default :
                                if (logEnable==true) log.warn "Tuya unknown attribute: ${descMap.data[0]}${descMap.data[1]}${descMap.data[2]}${descMap.data[3]}${descMap.data[4]} data.size() = ${descMap.data.size()} value: ${value}}"
                                if (logEnable==true) log.warn "map= ${descMap}"
                                break
                        }
                        break
                    default :
                        if (logEnable==true) log.warn "Read attribute response: unknown status code ${status} Attributte ${attrId} cluster ${descMap.clusterId}"
                        break
                } // switch (descMap.clusterId)
            }  //command is read attribute response
            break
        case "07" : // Configure Reporting Response
            if (logEnable==true) log.info "Received Configure Reporting Response for cluster:${descMap.clusterId} , data=${descMap.data} (Status: ${descMap.data[0]=="00" ? 'Success' : '<b>Failure</b>'})"
            // Status: Unreportable Attribute (0x8c)
            break
        case "0B" : // ZCL Default Response
            def status = descMap.data[1]
            if (status != "00") {
                switch (descMap.clusterId) {
                    case "0006" : // Switch state
                        if (logEnable==true) log.warn "Switch state is not supported -> Switch polling will be disabled."
                        state.switchPollingSupported = false
                    case "0B04" : // Electrical Measurement
                        if (logEnable==true) log.warn "Electrical measurement is not supported -> Power, Voltage and Amperage polling will be disabled."
                        state.powerPollingSupported = false
                        state.voltagePollingSupported = false
                        state.currentPollingSupported = false
                        break
                    case "0702" : // Energy
                        if (logEnable==true) log.warn "Energy measurement is not supported -> Energy polling will be disabled."
                        state.energyPollingSupported = false
                        break
                    default :
                        if (logEnable==true) log.info "Received ZCL Default Response to Command ${descMap.data[0]} for cluster:${descMap.clusterId} , data=${descMap.data} (Status: ${descMap.data[1]=="00" ? 'Success' : '<b>Failure</b>'})"
                        break
                }
            }
            break
        default :
            if (logEnable==true) log.warn "Unprocessed global command: cluster=${descMap.clusterId} command=${descMap.command} attrId=${descMap.attrId} value=${descMap.value} data=${descMap.data}"
    }
}

private String getAttribute(ArrayList _data) {
    String retValue = ""
    if (_data.size() >= 5) {
        if (_data[2] == "01" && _data[3] == "01" && _data[4] == "00") {
            retValue = "switch"
        }
        else if (_data[2] == "02" && _data[3] == "02" && _data[4] == "00") {
            retValue = "level"
        }
    }
    return retValue
}

private int getAttributeValue(ArrayList _data) {
    int retValue = 0
    
    if (_data.size() >= 6) {
        int dataLength = _data[5] as Integer
        int power = 1;
        for (i in dataLength..1) {
            retValue = retValue + power * zigbee.convertHexToInt(_data[i+5])
            power = power * 256
        }
    }
    return retValue
}

def off() {
    if (alwaysOn == true) {
        if (logEnable==true) log.warn "AlwaysOn option for ${device.displayName} is enabled , the command to switch it OFF is ignored!"
    }
    else {
        state.isDigital = true
        if (logEnable) {log.debug "Switching ${device.displayName} Off"}
        def cmds = zigbee.off()
        if (state.model == "TS0601") {
            cmds = zigbee.command(0xEF00, 0x0, "00010101000100")
        }
        runInMillis( digitalTimer, clearIsDigital)
        return cmds
    }
}

def on() {
    state.isDigital = true
    if (logEnable) {log.debug "Switching ${device.displayName} On"}
    def cmds = zigbee.on()
    if (state.model == "TS0601") {
        cmds = zigbee.command(0xEF00, 0x0, "00010101000101")
    }
    runInMillis( digitalTimer, clearIsDigital)
    return cmds
}

def clearIsDigital() { state.isDigital = false }

def isRefreshRequestClear() { state.isRefreshRequest = false }

def switchDebouncingClear() { state.switchDebouncing = false }



// * PING is used by Device-Watch in attempt to reach the Device
def ping() {
    return refresh()
}

def pollPower() {
    if (logEnable) {log.debug "pollPower().."}
    List<String> cmds = []
    if (state.powerPollingSupported & state.voltagePollingSupported & state.currentPollingSupported == true) {
        cmds += zigbee.readAttribute(0x0B04, [0x050B, 0x0505, 0x0508], dummy, delay=200)    // Power, Voltage and Amperage at once!
    }
    else {
        cmds += zigbee.electricMeasurementPowerRefresh()    // just power
    }
    state.isRefreshRequest = true
    runInMillis( refreshTimer, isRefreshRequestClear)       // 3 seconds
    return cmds
}


// Sends refresh / readAttribute commands to the plug
def poll( refreshAll = false ) {
    if (logEnable) {log.trace "polling.. refreshAll is ${refreshAll}"}
    checkDriverVersion()
    List<String> cmds = []
    if (state.switchPollingSupported == true && refreshAll == true ) {
        cmds = zigbee.onOffRefresh()                            // switch - polled only on full Refresh
    }
    if (state.powerPollingSupported & state.voltagePollingSupported & state.currentPollingSupported == true) {
        cmds += zigbee.readAttribute(0x0B04, [0x050B, 0x0505, 0x0508], dummy, delay=200)    // Power, Voltage and Amperage at once!
    }
    else {
        if (state.powerPollingSupported == true) 
            cmds += zigbee.electricMeasurementPowerRefresh()    // Power ( cluster 0B04, attr. 050B )
        if (state.voltagePollingSupported == true)
            cmds += zigbee.readAttribute(0x0B04, 0x0505)        // voltage
        if (state.currentPollingSupported == true)
            cmds += zigbee.readAttribute(0x0B04, 0x0508)        // current
    }    
    if (state.energyPollingSupported == true && refreshAll == true )
        cmds += zigbee.readAttribute(0x0702, 0x0000)            // energy - polled only on full Refresh
    state.isRefreshRequest = true
    runInMillis( refreshTimer, isRefreshRequestClear)           // 3 seconds
    return cmds
}


def refresh() {
    if (logEnable) {log.debug "refresh()..."}
    poll( true )
}

def autoPoll() {
    if (logEnable) {log.debug "autoPoll()"}
    checkIfNotPresent()
    if (autoPollingEnabled?.value == true) {
        if ( pollingInterval != null ) 
            runIn( pollingInterval, autoPoll)
        else
            runIn( defaultPollingInterval, autoPoll)
    }
    if (optimizations == true) 
        poll( refreshAll = false )
    else 
        poll( refreshAll = true )
}

def tuyaBlackMagic() {
    return zigbee.readAttribute(0x0000, [0x0004, 0x000, 0x0001, 0x0005, 0x0007, 0xfffe], [:], delay=200)    // Cluster: Basic, attributes: Man.name, ZLC ver, App ver, Model Id, Power Source, attributeReportingStatus
}

/*
    configure() method is called: 
       *  unconditionally during the initial pairing, immediately after Installed() method
       *  when Initialize button is pressed
       *  from updated() when preferencies are saved
*/
def configure() {
    if (txtEnable==true) log.info " configure().."
    List<String> cmds = []
    cmds += tuyaBlackMagic()
    cmds += refresh()
    cmds += zigbee.onOffConfig()
    cmds += zigbee.configureReporting(0x0702, 0x0000, DataType.UINT48, energyMinReportingTime as int, energyMaxReportingTime as int, energyTreshold as int)// +    // Energy reporting
           //zigbee.electricMeasurementPowerConfig(1, 600, 1) 
    sendZigbeeCommands(cmds)
}


// This method is called when the preferences of a device are updated.
def updated(){
    if (txtEnable==true) log.info "Updating ${device.getLabel()} (${device.getName()}) model ${state.model} presence: ${device.currentValue("presence")} AlwaysOn is <b>${alwaysOn}</b> "
    if (txtEnable==true) log.info "Debug logging is <b>${logEnable}</b> Description text logging is  <b>${txtEnable}</b>"
    if (logEnable==true) {
        runIn(/*1800*/86400, logsOff)    // turn off debug logging after /*30 minutes*/24 hours
        //if (txtEnable==true) log.info "Debug logging will be automatically switched off after 30 minutes!"
        if (txtEnable==true) log.info "Debug logging will be automatically switched off after 24 hours"
    }
    else {
        unschedule(logsOff)
    }

    if (autoPollingEnabled?.value==true) {
        if ( pollingInterval != null ) {
            runIn( pollingInterval, autoPoll)
            if (txtEnable==true) log.info "Auto polling is <b>enabled</b>, polling interval is ${pollingInterval} seconds"
        }
        else {
            runIn( defaultPollingInterval, autoPoll)
        }
    }
    else {
        unschedule(autoPoll)
        if (txtEnable==true) log.info "Auto polling is <b>disabled</b>"
    }
    if (txtEnable==true) log.info "configuring the switch and energy reporting.."
    configure()
}



void initializeVars( boolean fullInit = true ) {
    if (txtEnable==true) log.info "${device.displayName} InitializeVars()... fullInit = ${fullInit}"
    if (fullInit == true ) {
        state.clear()
        state.driverVersion = driverVersionAndTimeStamp()
    }
    if (fullInit == true || state.lastPower == null) state.lastPower = 0.0
    if (fullInit == true || state.lastVoltage == null) state.lastVoltage = 0.0
    if (fullInit == true || state.lastAmperage == null) state.lastAmperage = 0.0
    if (fullInit == true || state.lastEnergy == null) state.lastEnergy = 0.0
    if (fullInit == true || state.lastSwitchState == null) state.lastSwitchState = "unknown"
    if (fullInit == true || state.lastPresenceState == null) state.lastPresenceState = "unknown"
    if (fullInit == true || state.notPresentCounter == null) state.notPresentCounter = 0
    if (fullInit == true || state.switchPollingSupported == null) state.switchPollingSupported = true
    if (fullInit == true || state.voltagePollingSupported == null) state.voltagePollingSupported = true
    if (fullInit == true || state.currentPollingSupported == null) state.currentPollingSupported = true
    if (fullInit == true || state.powerPollingSupported == null) state.powerPollingSupported = true
    if (fullInit == true || state.energyPollingSupported == null) state.energyPollingSupported = true
    if (fullInit == true || state.isDigital == null) state.isDigital = true
    if (fullInit == true || state.isRefreshRequest == null) state.isRefreshRequest = true
    if (fullInit == true || state.switchDebouncing == null) state.switchDebouncing = false
    if (fullInit == true || device.getDataValue("logEnable") == null) device.updateSetting("logEnable", false)
    if (fullInit == true || device.getDataValue("txtEnable") == null) device.updateSetting("txtEnable", true)
    if (fullInit == true || device.getDataValue("autoPollingEnabled") == null) device.updateSetting("autoPollingEnabled", true)
    if (fullInit == true || device.getDataValue("optimizations") == null) device.updateSetting("optimizations", true)
    if (fullInit == true || device.getDataValue("energyMinReportingTime") == null) device.updateSetting("energyMinReportingTime", 60)
    if (fullInit == true || device.getDataValue("energyMaxReportingTime") == null) device.updateSetting("energyMaxReportingTime", 3600)
    if (fullInit == true || device.getDataValue("energyTreshold") == null) device.updateSetting("energyTreshold", 1)
    if (fullInit == true || device.getDataValue("pollingInterval") == null) device.updateSetting("pollingInterval", defaultPollingInterval)
    if (device.getDataValue("alwaysOn") == null)  device.updateSetting("alwaysOn", false)       // do not change the "alwaysOn" setting if already set!

    def mm = device.getDataValue("model")
    if ( mm != null) {
        state.model = mm
        if (logEnable==true) log.trace " model = ${state.model}"
    }
    else {
        if (txtEnable==true) log.warn " Model not found, please re-pair the device!"
        state.model = UNKNOWN
    }
    def ep = device.getEndpointId()
    if ( ep  != null) {
        state.destinationEP = ep
        if (logEnable==true) log.trace " destinationEP = ${state.destinationEP}"
    }
    else {
        if (txtEnable==true) log.warn " Destination End Point not found, please re-pair the device!"
        state.destinationEP = "01"    // fallback
    }    
}

def driverVersionAndTimeStamp() {version()+' '+timeStamp()}

def checkDriverVersion() {
    if (state.driverVersion != null && driverVersionAndTimeStamp() == state.driverVersion) {
        //log.trace "driverVersion is the same ${driverVersionAndTimeStamp()}"
    }
    else {
        if (txtEnable==true) log.debug "updating the settings from the current driver version ${state.driverVersion} to the new version ${driverVersionAndTimeStamp()}"
        initializeVars( fullInit = false ) 
        state.driverVersion = driverVersionAndTimeStamp()
    }
}

def logInitializeRezults() {
    if (logEnable==true) log.info "${device.displayName} switchPollingSupported  = ${state.switchPollingSupported}"
    if (logEnable==true) log.info "${device.displayName} voltagePollingSupported = ${state.voltagePollingSupported}"
    if (logEnable==true) log.info "${device.displayName} currentPollingSupported = ${state.currentPollingSupported}"
    if (logEnable==true) log.info "${device.displayName} powerPollingSupported   = ${state.powerPollingSupported}"
    if (logEnable==true) log.info "${device.displayName} energyPollingSupported  = ${state.energyPollingSupported}"
    if (logEnable==true) log.info "${device.displayName} Initialization finished"
}

def initialize() {
    if (txtEnable==true) log.info "${device.displayName} Initialize()..."
    unschedule()
    initializeVars()
    updated()            // calls also configure()
    runIn( 12, logInitializeRezults)
}

// This method is called when the device is first created.
def installed() {
    if (txtEnable==true) log.info "${device.displayName} Installed()..."
    initializeVars()
    runIn( 5, initialize)
    if (logEnable==true) log.debug "calling initialize() after 5 seconds..."
    // HE will autoomaticall call configure() method here
}

void uninstalled() {
    if (logEnable==true) log.info "${device.displayName} Uninstalled()..."
    unschedule()     //Unschedule any existing schedules
}

// not used !
def powerRefresh() {
    def cmds = zigbee.electricMeasurementPowerRefresh()
    cmds.each{
        sendHubCommand(new hubitat.device.HubMultiAction(delayBetween(cmds,200), hubitat.device.Protocol.ZIGBEE))
    }
}

// called when any event was received from the Zigbee device in parse() method..
def setPresent() {
    if (state.lastPresenceState != "present") {
    	sendEvent(name: "presence", value: "present") 
        state.lastPresenceState = "present"
    }
    state.notPresentCounter = 0
}

// called from autoPoll()
def checkIfNotPresent() {
    if (state.notPresentCounter != null) {
        state.notPresentCounter = state.notPresentCounter + 1
        if (state.notPresentCounter > presenceCountTreshold) {
            if (state.lastPresenceState != "not present") {
    	        sendEvent(name: "presence", value: "not present")
                state.lastPresenceState = "not present"
                if (logEnable==true) log.warn "not present!"
            }
        }
    }
}

void sendZigbeeCommands(List<String> cmds) {
    if (logEnable) {log.trace "${device.displayName} sendZigbeeCommands received : ${cmds}"}
	sendHubCommand(new hubitat.device.HubMultiAction(cmds, hubitat.device.Protocol.ZIGBEE))
}

def logsOff(){
    log.warn "debug logging disabled..."
    device.updateSetting("logEnable", [value:"false",type:"bool"])
}

boolean isTuyaE00xCluster( String description )
{
    if(description.indexOf('cluster: E000') >= 0 || description.indexOf('cluster: E001') >= 0) {
        if (logEnable) log.debug " Tuya cluster: E000 or E001 - don't know how to handle it, skipping it for now..."
        return true
    }
    else
        return false
}

boolean otherTuyaOddities( String description )
{
    if(description.indexOf('cluster: 0000') >= 0 || description.indexOf('attrId: 0004') >= 0) {
        if (logEnable) log.debug " other Tuya oddities - don't know how to handle it, skipping it for now..."
        return true
    }
    else
        return false
}


